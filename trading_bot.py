# -*- coding: utf-8 -*-
"""Trading bot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mAhcVpto8bQx4cbkb6RD0EQbKY2rDgKR
"""

# !pip install python-binance
# !pip install colorama

from binance.client import Client
import time

import time
import random
import csv
from datetime import datetime
from binance import Client
from colorama import Fore, Style, init
from collections import deque

API_Key = "cyGBLd3EcNyD5pDuz562VMPGta1msRKqQqfswIGjutZaSfCeCJdY8P8sXhpiBgin"
Secret_Key = "4Bc5ih1EZnELuECyvlgBCPBRjFi0ycz98o3vTN2xgbNLv35No7dbKFssJb7E3pbg"

client = Client(API_Key, Secret_Key, testnet=True)
client.get_account()

import time
import random
import csv
import os
import math
from datetime import datetime
from colorama import Fore, Style, init
from binance.client import Client
import numpy as np
import matplotlib.pyplot as plt
from IPython.display import clear_output

# Initialize client
API_Key = 'cyGBLd3EcNyD5pDuz562VMPGta1msRKqQqfswIGjutZaSfCeCJdY8P8sXhpiBgin'
Secret_Key = '4Bc5ih1EZnELuECyvlgBCPBRjFi0ycz98o3vTN2xgbNLv35No7dbKFssJb7E3pbg'
client = Client(API_Key, Secret_Key, testnet=True)

# Trading parameters
symbols = ['BTCUSDT', 'ETHUSDT']
# thresholds = {
#     'BTCUSDT': {'buy': 94749, 'sell': 94752},
#     'ETHUSDT': {'buy': 2934, 'sell': 2937}
# }
trade_quantity = 0.001  # initial dummy quantity, will adjust automatically

# Tracking variables
profit_total = 0
trade_count = 0
buy_trade_count = 0
sell_trade_count = 0
buy_prices = {}
trailing_high = {}
price_history = {symbol: [] for symbol in symbols}
profit_history = []
time_history = []
start_time = time.time()

# Trailing stop loss parameters
trailing_stop_loss_percent = 0.003  # 0.3% trailing stop

# Create a CSV log file
log_filename = 'trade_transaction_log.csv'
if not os.path.isfile(log_filename):
    with open(log_filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Timestamp', 'Symbol', 'Action', 'Price'])

# Initialize colorama
init(autoreset=True)

def get_current_price(symbol):
    ticker = client.get_symbol_ticker(symbol=symbol)
    return float(ticker['price'])

def get_step_size(symbol):
    info = client.get_symbol_info(symbol)
    for filt in info['filters']:
        if filt['filterType'] == 'LOT_SIZE':
            return float(filt['stepSize'])

def round_step_size(quantity, step_size):
    import decimal
    precision = int(round(-math.log10(step_size)))
    return float(round(decimal.Decimal(quantity), precision))

def get_safe_quantity(symbol, min_notional=10):
    price = get_current_price(symbol)
    raw_quantity = min_notional / price
    step_size = get_step_size(symbol)
    safe_quantity = round_step_size(raw_quantity, step_size)
    return safe_quantity

def place_buy_order(symbol, quantity, price):
    global profit_total, trade_count, buy_trade_count
    order = client.order_market_buy(symbol=symbol, quantity=quantity)
    print(Fore.GREEN + f"Buy order placed for {symbol} at {price}")
    buy_prices[symbol] = price
    trailing_high[symbol] = price
    log_trade(symbol, 'BUY', price)
    trade_count += 1
    buy_trade_count += 1

def place_sell_order(symbol, quantity, price):
    global profit_total, trade_count, sell_trade_count
    order = client.order_market_sell(symbol=symbol, quantity=quantity)
    print(Fore.RED + f"Sell order placed for {symbol} at {price}")
    profit = (price - buy_prices.get(symbol, price)) * quantity
    profit_total += profit
    print(Fore.CYAN + f"Profit from this trade: {profit:.2f} USD")
    log_trade(symbol, 'SELL', price)
    trade_count += 1
    sell_trade_count += 1

    profit_history.append(profit_total)
    elapsed_time = (time.time() - start_time) / 60
    time_history.append(elapsed_time)

def log_trade(symbol, action, price):
    with open(log_filename, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([datetime.now(), symbol, action, price])

def calculate_moving_average(prices):
    return sum(prices) / len(prices) if prices else 0

def calculate_rsi(prices, period=9):
    if len(prices) < period:
        return None
    deltas = np.diff(prices)
    seed = deltas[:period]
    up = seed[seed > 0].sum() / period
    down = -seed[seed < 0].sum() / period
    rs = up / down if down != 0 else 0
    rsi = 100. - 100. / (1. + rs)
    return rsi

def trading_bot():
    in_position = {symbol: False for symbol in symbols}

    try:
        while True:
            global profit_total, trade_count, buy_trade_count, sell_trade_count, profit_history, time_history
            os.system('cls' if os.name == 'nt' else 'clear')
            clear_output(wait=True)
            print("==== LIVE DASHBOARD ====")
            print(f"Total Trades: {trade_count}")
            print(f"Total Profit: {profit_total:.2f} USD")
            run_time = (time.time() - start_time) / 60
            print(f"Bot Running For: {run_time:.2f} minutes\n")

            for symbol in symbols:
                current_price = get_current_price(symbol)
                print(Fore.YELLOW + f"{symbol} Current Price: {current_price}")

                # Update price history
                price_history[symbol].append(current_price)
                if len(price_history[symbol]) > 20:
                    price_history[symbol].pop(0)
                moving_avg = calculate_moving_average(price_history[symbol][-10:])
                rsi = calculate_rsi(price_history[symbol])
                if rsi is not None:
                    print(f"{symbol} RSI: {rsi:.2f}")

                # Decision logic with double confirmation and trailing stop loss
                if not in_position[symbol]:
                    if rsi and rsi < 30 and current_price > moving_avg:
                        quantity = get_safe_quantity(symbol)
                        print(Fore.GREEN + f"RSI below 30 and price above moving average! Buying {symbol}.")
                        place_buy_order(symbol, quantity, current_price)
                        in_position[symbol] = True
                else:
                    if current_price > trailing_high[symbol]:
                        trailing_high[symbol] = current_price

                    trailing_stop_price = trailing_high[symbol] * (1 - trailing_stop_loss_percent)

                    if current_price <= trailing_stop_price:
                        quantity = get_safe_quantity(symbol)
                        print(Fore.RED + f"Price hit trailing stop loss for {symbol}. Selling!")
                        place_sell_order(symbol, quantity, current_price)
                        in_position[symbol] = False

            if profit_history and time_history:
                plt.figure(figsize=(8,5))
                plt.plot(time_history, profit_history, marker='o')
                plt.title('Live Profit Over Time')
                plt.xlabel('Time (minutes)')
                plt.ylabel('Total Profit (USD)')
                plt.grid(True)
                plt.show()

            sleep_time = random.randint(1, 5)
            print(f"\nSleeping for {sleep_time} seconds...")
            time.sleep(sleep_time)

    except KeyboardInterrupt:
        end_time = time.time()
        total_run_time = (end_time - start_time) / 60
        print(Fore.MAGENTA + "\n==== SESSION SUMMARY ====")
        print(f"Total Trades: {trade_count}")
        print(f"Total Buy Trades: {buy_trade_count}")
        print(f"Total Sell Trades: {sell_trade_count}")
        print(f"Total Profit: {profit_total:.2f} USD")
        print(f"Total Run Time: {total_run_time:.2f} minutes")

        if profit_history and time_history:
            plt.figure(figsize=(10,6))
            plt.plot(time_history, profit_history, marker='o')
            plt.title('Profit Over Time')
            plt.xlabel('Time (minutes)')
            plt.ylabel('Total Profit (USD)')
            plt.grid(True)
            plt.show()

        if buy_trade_count > 0 or sell_trade_count > 0:
            plt.figure(figsize=(6,6))
            labels = ['Buy Trades', 'Sell Trades']
            sizes = [buy_trade_count, sell_trade_count]
            colors = ['#66b3ff', '#ff9999']
            plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
            plt.axis('equal')
            plt.title('Buy vs Sell Trades Distribution')
            plt.show()

# Run the bot
trading_bot()